/* The following code was generated by JFlex 1.6.1 */

import java.math.BigDecimal;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/reza/IdeaProjects/Compiler/src/clike.jflex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\14\1\73\1\74\1\13\22\0\1\15\1\65\1\1"+
    "\2\0\1\20\1\21\1\2\1\53\1\52\1\22\1\11\1\61\1\10"+
    "\1\12\1\71\1\4\11\5\1\67\1\60\1\64\1\62\1\63\2\0"+
    "\4\24\1\17\1\24\21\6\1\23\2\6\1\56\1\3\1\57\1\72"+
    "\1\7\1\0\1\27\1\25\1\35\1\43\1\16\1\44\1\46\1\37"+
    "\1\41\1\6\1\30\1\32\1\6\1\40\1\31\2\6\1\26\1\36"+
    "\1\34\1\42\1\51\1\50\1\45\1\33\1\47\1\54\1\70\1\55"+
    "\1\66\6\0\1\73\u1fa2\0\1\73\1\73\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\2\10\1\4\1\11\1\12\1\13\15\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\1\2\37\1\0\1\40\1\0\2\40"+
    "\1\0\2\3\1\41\1\42\2\43\2\4\1\44\1\0"+
    "\1\45\15\4\1\46\2\4\1\47\6\4\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\0\2\65\1\0\2\66\1\0"+
    "\2\4\2\44\1\0\15\4\1\67\5\4\1\70\4\4"+
    "\2\65\1\66\1\71\1\4\1\0\1\4\1\72\1\73"+
    "\2\4\1\74\1\75\1\76\2\4\1\77\11\4\1\100"+
    "\1\4\1\101\1\66\1\4\1\102\3\4\1\103\4\4"+
    "\1\104\2\4\1\105\1\43\1\106\1\66\1\107\1\110"+
    "\1\111\1\4\1\112\1\113\1\114\2\4\1\115\1\66"+
    "\1\4\1\116\1\117\1\66\1\120\3\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\172\0\267\0\364\0\u0131\0\u0131"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\172\0\u0262\0\u029f\0\u02dc"+
    "\0\172\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487"+
    "\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\172\0\172\0\u0726\0\172\0\172\0\u0763"+
    "\0\172\0\u07a0\0\u07dd\0\172\0\u081a\0\u0857\0\u01e8\0\u0894"+
    "\0\u08d1\0\u0131\0\u090e\0\u094b\0\172\0\172\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\172\0\u0af6\0\u0b33\0\u0b70"+
    "\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0131\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\172\0\172\0\172\0\172"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\172\0\u0857\0\u0857\0\u1034\0\u1071\0\u08d1\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\172\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u0131\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u0131\0\u1666\0\u16a3\0\u16e0\0\u171d\0\172\0\u175a\0\u1797"+
    "\0\u0131\0\u17d4\0\u1811\0\u184e\0\u0131\0\u0131\0\u188b\0\u18c8"+
    "\0\u0131\0\u0131\0\u0131\0\u1905\0\u1942\0\u0131\0\u197f\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u0131"+
    "\0\u1ba4\0\u0131\0\u1be1\0\u1c1e\0\u0131\0\u1c5b\0\u1c98\0\u1cd5"+
    "\0\u0131\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u0131\0\u1e06\0\u1e43"+
    "\0\u0131\0\u0131\0\u0131\0\u1e80\0\u0131\0\u0131\0\u0131\0\u1ebd"+
    "\0\u0131\0\u0131\0\u0131\0\u1efa\0\u1f37\0\u0131\0\u1f74\0\u1fb1"+
    "\0\u0131\0\u0131\0\u1fee\0\u0131\0\u202b\0\u2068\0\u0857";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\2\15\1\16\1\7\1\17\1\20"+
    "\1\21\2\7\1\22\1\23\3\7\1\24\1\7\1\25"+
    "\1\26\1\27\2\7\1\30\1\31\1\32\1\33\1\7"+
    "\1\34\1\7\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\3\1\15\1\60"+
    "\1\61\1\60\1\62\7\60\1\63\1\64\60\60\101\0"+
    "\2\65\1\66\3\0\1\67\3\0\2\70\3\0\1\71"+
    "\21\66\1\71\4\66\27\0\2\6\1\66\3\0\1\67"+
    "\3\0\2\70\3\0\27\66\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\27\7\27\0\1\73\1\74\2\0\1\75"+
    "\1\0\1\67\66\0\1\73\1\74\3\0\1\76\1\67"+
    "\66\0\1\77\1\100\103\0\1\15\64\0\3\7\1\72"+
    "\6\0\2\7\3\0\7\7\1\101\12\7\1\102\4\7"+
    "\43\0\1\103\1\104\74\0\1\105\57\0\3\7\1\72"+
    "\6\0\2\7\3\0\3\7\1\106\2\7\1\107\1\7"+
    "\1\110\16\7\27\0\3\7\1\72\6\0\1\111\1\7"+
    "\3\0\27\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\6\7\1\112\20\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\3\7\1\113\23\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\4\7\1\114\1\7\1\115\5\7\1\116"+
    "\12\7\27\0\3\7\1\72\6\0\2\7\3\0\11\7"+
    "\1\117\4\7\1\120\6\7\1\121\1\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\15\7\1\122\3\7\1\123"+
    "\5\7\27\0\3\7\1\72\6\0\2\7\3\0\15\7"+
    "\1\124\11\7\27\0\3\7\1\72\6\0\1\125\1\7"+
    "\3\0\6\7\1\126\20\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\4\7\1\127\1\7\1\130\1\131\17\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\6\7\1\132"+
    "\20\7\27\0\3\7\1\72\6\0\2\7\3\0\14\7"+
    "\1\133\12\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\6\7\1\134\20\7\105\0\1\135\74\0\1\136\74\0"+
    "\1\137\74\0\1\140\102\0\1\141\4\0\1\60\1\0"+
    "\1\60\1\0\7\60\2\0\60\60\1\64\1\142\1\143"+
    "\1\144\7\64\2\0\10\64\1\145\1\146\5\64\1\147"+
    "\3\64\1\150\3\64\1\151\26\64\16\0\1\64\64\0"+
    "\2\65\1\66\7\0\2\66\3\0\27\66\27\0\3\66"+
    "\1\152\6\0\2\66\3\0\27\66\27\0\1\153\1\154"+
    "\1\66\1\152\2\155\4\0\2\66\3\0\27\66\27\0"+
    "\1\156\1\157\1\66\1\152\6\0\2\157\3\0\1\66"+
    "\2\157\1\66\1\157\5\66\1\157\5\66\2\157\5\66"+
    "\35\0\1\67\3\0\2\160\61\0\2\74\4\0\1\67"+
    "\3\0\2\160\73\0\2\160\61\0\2\100\10\0\2\160"+
    "\61\0\3\7\1\72\6\0\2\7\3\0\13\7\1\161"+
    "\13\7\27\0\3\7\1\72\6\0\2\7\3\0\11\7"+
    "\1\162\15\7\23\0\13\103\1\163\1\164\60\103\22\165"+
    "\1\0\52\165\4\0\3\7\1\72\6\0\1\166\1\7"+
    "\3\0\27\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\6\7\1\167\20\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\11\7\1\170\15\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\11\7\1\171\1\172\14\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\15\7\1\173\11\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\17\7\1\174\7\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\13\7\1\175"+
    "\13\7\27\0\3\7\1\72\6\0\2\7\3\0\15\7"+
    "\1\176\11\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\4\7\1\177\22\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\3\7\1\200\23\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\24\7\1\201\2\7\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\16\7\1\202\10\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\11\7\1\203\1\204\14\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\11\7\1\205"+
    "\15\7\27\0\3\7\1\72\6\0\2\7\3\0\21\7"+
    "\1\206\5\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\17\7\1\207\7\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\7\7\1\210\17\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\3\7\1\211\23\7\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\6\7\1\212\20\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\11\7\1\213\15\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\16\7\1\214\10\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\16\7\1\215"+
    "\10\7\27\0\2\154\1\66\1\152\6\0\2\66\3\0"+
    "\27\66\27\0\1\216\1\217\73\0\2\220\1\66\1\152"+
    "\6\0\2\220\3\0\1\66\2\220\1\66\1\220\5\66"+
    "\1\220\5\66\2\220\5\66\27\0\1\216\1\217\2\0"+
    "\2\155\67\0\3\7\1\72\6\0\1\221\1\7\3\0"+
    "\27\7\27\0\3\7\1\72\6\0\1\222\1\7\3\0"+
    "\27\7\37\0\1\164\60\0\21\165\1\223\53\165\4\0"+
    "\3\7\1\72\6\0\2\7\3\0\4\7\1\224\22\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\7\7\1\225"+
    "\17\7\27\0\3\7\1\72\6\0\1\226\1\7\3\0"+
    "\27\7\27\0\3\7\1\72\6\0\2\7\3\0\17\7"+
    "\1\227\7\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\6\7\1\230\20\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\23\7\1\231\3\7\27\0\3\7\1\72\6\0"+
    "\1\232\1\7\3\0\27\7\27\0\3\7\1\72\6\0"+
    "\1\233\1\7\3\0\27\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\11\7\1\234\1\7\1\235\13\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\3\7\1\236\23\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\16\7\1\237"+
    "\10\7\27\0\3\7\1\72\6\0\1\240\1\7\3\0"+
    "\27\7\27\0\3\7\1\72\6\0\2\7\3\0\11\7"+
    "\1\241\15\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\7\7\1\242\17\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\16\7\1\243\10\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\4\7\1\244\22\7\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\2\7\1\245\24\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\13\7\1\246\13\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\4\7\1\247\22\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\6\7\1\250"+
    "\20\7\27\0\3\7\1\72\6\0\2\7\3\0\7\7"+
    "\1\251\17\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\20\7\1\252\6\7\27\0\2\217\73\0\2\253\1\66"+
    "\1\152\6\0\2\253\3\0\1\66\2\253\1\66\1\253"+
    "\5\66\1\253\5\66\2\253\5\66\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\3\7\1\254\23\7\23\0\20\165"+
    "\1\164\1\223\53\165\4\0\3\7\1\72\6\0\2\7"+
    "\3\0\5\7\1\255\21\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\3\7\1\256\23\7\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\3\7\1\257\23\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\16\7\1\260\10\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\11\7\1\261\15\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\15\7\1\262"+
    "\11\7\27\0\3\7\1\72\6\0\2\7\3\0\6\7"+
    "\1\263\20\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\12\7\1\264\14\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\17\7\1\265\7\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\7\7\1\266\17\7\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\17\7\1\267\7\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\7\7\1\270\17\7\27\0"+
    "\3\7\1\72\6\0\1\271\1\7\3\0\27\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\11\7\1\272\15\7"+
    "\27\0\3\7\1\72\6\0\1\273\1\7\3\0\27\7"+
    "\27\0\2\274\1\66\1\152\6\0\2\274\3\0\1\66"+
    "\2\274\1\66\1\274\5\66\1\274\5\66\2\274\5\66"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\15\7\1\275"+
    "\11\7\27\0\3\7\1\72\6\0\2\7\3\0\15\7"+
    "\1\276\11\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\20\7\1\277\6\7\27\0\3\7\1\72\6\0\2\7"+
    "\3\0\15\7\1\300\11\7\27\0\3\7\1\72\6\0"+
    "\2\7\3\0\23\7\1\301\3\7\27\0\3\7\1\72"+
    "\6\0\2\7\3\0\21\7\1\302\5\7\27\0\3\7"+
    "\1\72\6\0\2\7\3\0\14\7\1\303\12\7\27\0"+
    "\3\7\1\72\6\0\2\7\3\0\20\7\1\304\6\7"+
    "\27\0\3\7\1\72\6\0\2\7\3\0\7\7\1\305"+
    "\17\7\27\0\3\7\1\72\6\0\1\306\1\7\3\0"+
    "\27\7\27\0\2\307\1\66\1\152\6\0\2\307\3\0"+
    "\1\66\2\307\1\66\1\307\5\66\1\307\5\66\2\307"+
    "\5\66\27\0\3\7\1\72\6\0\2\7\3\0\17\7"+
    "\1\310\7\7\27\0\3\7\1\72\6\0\1\311\1\7"+
    "\3\0\27\7\27\0\3\7\1\72\6\0\2\7\3\0"+
    "\11\7\1\312\15\7\27\0\2\313\1\66\1\152\6\0"+
    "\2\313\3\0\1\66\2\313\1\66\1\313\5\66\1\313"+
    "\5\66\2\313\5\66\27\0\3\7\1\72\6\0\1\314"+
    "\1\7\3\0\27\7\27\0\2\315\1\66\1\152\6\0"+
    "\2\315\3\0\1\66\2\315\1\66\1\315\5\66\1\315"+
    "\5\66\2\315\5\66\27\0\2\316\1\66\1\152\6\0"+
    "\2\316\3\0\1\66\2\316\1\66\1\316\5\66\1\316"+
    "\5\66\2\316\5\66\27\0\2\317\1\66\1\152\6\0"+
    "\2\317\3\0\1\66\2\317\1\66\1\317\5\66\1\317"+
    "\5\66\2\317\5\66\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8357];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\10\1\1\11\3\1\1\11\15\1\10\11"+
    "\4\1\2\11\1\1\2\11\1\1\1\11\2\1\1\11"+
    "\1\0\1\1\1\0\2\1\1\0\2\1\2\11\5\1"+
    "\1\0\1\11\27\1\15\11\1\0\2\1\1\0\2\1"+
    "\1\0\3\1\1\11\1\0\30\1\1\11\4\1\1\0"+
    "\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[207];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return "EOF";
            }
            case 208: break;
            case STRING: {
              yybegin(YYINITIAL);  System.out.println("not valid string");
            }
            case 209: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ("Error at line: " + yyline + " and column: " + yycolumn);
            }
          case 81: break;
          case 2: 
            { yybegin(STRING); string.setLength(0);
            }
          case 82: break;
          case 3: 
            { return "Integer";
            }
          case 83: break;
          case 4: 
            { return "id";
            }
          case 84: break;
          case 5: 
            { return "MINUS";
            }
          case 85: break;
          case 6: 
            { return "PLUS";
            }
          case 86: break;
          case 7: 
            { return "DOT";
            }
          case 87: break;
          case 8: 
            { /* ignore */
            }
          case 88: break;
          case 9: 
            { return "MOD";
            }
          case 89: break;
          case 10: 
            { return "AND";
            }
          case 90: break;
          case 11: 
            { return "MULT";
            }
          case 91: break;
          case 12: 
            { return "RPAREN";
            }
          case 92: break;
          case 13: 
            { return "LPAREN";
            }
          case 93: break;
          case 14: 
            { return "LBRACE";
            }
          case 94: break;
          case 15: 
            { return "RBRACE";
            }
          case 95: break;
          case 16: 
            { return "LBRACK";
            }
          case 96: break;
          case 17: 
            { return "RBRACK";
            }
          case 97: break;
          case 18: 
            { return "SEMICOLON";
            }
          case 98: break;
          case 19: 
            { return "COMMA";
            }
          case 99: break;
          case 20: 
            { return "EQ";
            }
          case 100: break;
          case 21: 
            { return "GT";
            }
          case 101: break;
          case 22: 
            { return "LT";
            }
          case 102: break;
          case 23: 
            { return "NOT";
            }
          case 103: break;
          case 24: 
            { return "COMP";
            }
          case 104: break;
          case 25: 
            { return "COLON";
            }
          case 105: break;
          case 26: 
            { return "OR";
            }
          case 106: break;
          case 27: 
            { return "DIV";
            }
          case 107: break;
          case 28: 
            { return "XOR";
            }
          case 108: break;
          case 29: 
            { string.append( yytext() );
            }
          case 109: break;
          case 30: 
            { yybegin(YYINITIAL); return ("string = " + string.toString());
            }
          case 110: break;
          case 31: 
            { yybegin(YYINITIAL);  System.out.println("not valid string");
            }
          case 111: break;
          case 32: 
            { return ("invalid Identifier at line: " + yyline + " and column: " + yycolumn);
            }
          case 112: break;
          case 33: 
            { return "MINUSMINUS";
            }
          case 113: break;
          case 34: 
            { return "PLUSPLUS";
            }
          case 114: break;
          case 35: 
            { return "float";
            }
          case 115: break;
          case 36: 
            { return "comment";
            }
          case 116: break;
          case 37: 
            { return "ANDAND";
            }
          case 117: break;
          case 38: 
            { return "if";
            }
          case 118: break;
          case 39: 
            { return "do";
            }
          case 119: break;
          case 40: 
            { return "EQEQ";
            }
          case 120: break;
          case 41: 
            { return "GTEQ";
            }
          case 121: break;
          case 42: 
            { return "LTEQ";
            }
          case 122: break;
          case 43: 
            { return "NOTEQ";
            }
          case 123: break;
          case 44: 
            { return "OROR";
            }
          case 124: break;
          case 45: 
            { string.append( '\"' );
            }
          case 125: break;
          case 46: 
            { string.append( '\'' );
            }
          case 126: break;
          case 47: 
            { string.append( '\\' );
            }
          case 127: break;
          case 48: 
            { string.append( '\b' );
            }
          case 128: break;
          case 49: 
            { string.append( '\r' );
            }
          case 129: break;
          case 50: 
            { string.append( '\t' );
            }
          case 130: break;
          case 51: 
            { string.append( '\n' );
            }
          case 131: break;
          case 52: 
            { string.append( '\f' );
            }
          case 132: break;
          case 53: 
            { BigDecimal temp = new BigDecimal(yytext());
              return ("ENotation: " + temp.toPlainString());
            }
          case 133: break;
          case 54: 
            { String temp = "";
              for (int i = 2 ; i < yytext().length() ; i ++){
                temp += yytext().charAt(i);
              }
              int result = Integer.valueOf(temp , 16);
              return ("hex: " + result);
            }
          case 134: break;
          case 55: 
            { return "int";
            }
          case 135: break;
          case 56: 
            { return "for";
            }
          case 136: break;
          case 57: 
            { return "else";
            }
          case 137: break;
          case 58: 
            { return "bool";
            }
          case 138: break;
          case 59: 
            { return "byte";
            }
          case 139: break;
          case 60: 
            { return "long";
            }
          case 140: break;
          case 61: 
            { return "true";
            }
          case 141: break;
          case 62: 
            { return "case";
            }
          case 142: break;
          case 63: 
            { return "char";
            }
          case 143: break;
          case 64: 
            { return "goto";
            }
          case 144: break;
          case 65: 
            { return "void";
            }
          case 145: break;
          case 66: 
            { return "break";
            }
          case 146: break;
          case 67: 
            { return "const";
            }
          case 147: break;
          case 68: 
            { return "until";
            }
          case 148: break;
          case 69: 
            { return "false";
            }
          case 149: break;
          case 70: 
            { return "while";
            }
          case 150: break;
          case 71: 
            { return "extern";
            }
          case 151: break;
          case 72: 
            { return "return";
            }
          case 152: break;
          case 73: 
            { return "record";
            }
          case 153: break;
          case 74: 
            { return "string";
            }
          case 154: break;
          case 75: 
            { return "sizeof";
            }
          case 155: break;
          case 76: 
            { return "switch";
            }
          case 156: break;
          case 77: 
            { return "double";
            }
          case 157: break;
          case 78: 
            { return "include";
            }
          case 158: break;
          case 79: 
            { return "default";
            }
          case 159: break;
          case 80: 
            { return "continue";
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
